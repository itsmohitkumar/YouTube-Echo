name: CI/CD for Dockerized Flask App with Python CI

on:
  push:
    branches: 
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  dockerbuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build . --file Dockerfile --tag workflow-test:$(date +%s) --build-arg LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}

  test:
    runs-on: ubuntu-latest
    needs: dockerbuild

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.20'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variable
        run: echo "LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}" >> $GITHUB_ENV

      - name: Run tests
        run: pytest

      - name: Lint code with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    environment: YouTube-Echo  # Specify the environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/youtube-echo:latest
          build-args: |
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}

      - name: Image digest
        run: echo ${{ steps.build-and-publish.outputs.digest }}
