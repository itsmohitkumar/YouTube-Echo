name: CI/CD for Dockerized Flask App with Python CI

on:
  push:
    branches: 
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 3: Set up Python environment
      - name: Set up Python 3.9.20
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.20'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Set environment variable for LANGCHAIN_API_KEY
      - name: Set environment variable
        run: echo "LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}" >> $GITHUB_ENV

      # Step 6: Run tests
      - name: Run tests
        run: pytest
        continue-on-error: false  # Fail the job if tests fail

      # Step 7: Linting (Optional)
      - name: Lint code with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  dockerbuild:
    runs-on: ubuntu-latest
    needs: test  # Ensure tests pass before building
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 3: Build the Docker Image
      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag workflow-test:$(date +%s) --cache-from=workflow-test:latest

  build-and-publish:
    needs: dockerbuild  # Ensure the Docker build completes before publishing
    runs-on: ubuntu-latest
    environment: YouTube-Echo  # Specify the environment here

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-echo:latest  # Use lowercase
          build-args: |
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache

      # Step 5: Output Docker image digest
      - name: Image digest
        run: echo "Docker image digest: ${{ steps.build-and-publish.outputs.digest }}"

  notify:
    if: failure()  # Trigger only if previous jobs fail
    runs-on: ubuntu-latest
    needs: [test, dockerbuild, build-and-publish]
    steps:
      # Step 1: Log failure notification
      - name: Log failure
        run: echo "CI/CD pipeline failed for commit: ${{ github.sha }}. Please check the logs."
